package jusacco.TPFinal.Cliente.view;
import javax.swing.*;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;

import jusacco.TPFinal.Cliente.controller.Controller;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
/**/
//Generated by GuiGenie - Copyright (c) 2004 Mario Awad.
//Home Page http://guigenie.cjb.net - Check often for new versions!

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.event.*;

public class GUICliente extends JPanel implements ActionListener  {
  private JButton btnChooser;
  private JButton btnStart;
  private JLabel jcomp3;
  private JComboBox jcomp4;
  private JTextField cantidad;
  private JLabel labelSeg;
  private JLabel labelSam;
  private JTextField nroFrame;
  private JLabel labelFrame;
  private JCheckBox chkHighEnd;
  private JFileChooser fc;
  JFrame frame;
  Controller controlador;
	
	public GUICliente(Controller controlador){
		this.controlador = controlador;
		frame = new JFrame ("Renderizado distribuido");
	    frame.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
        Dimension dimension = Toolkit.getDefaultToolkit().getScreenSize();
        int x = (int) ((dimension.getWidth() - frame.getWidth())/5);
        int y = (int) ((dimension.getHeight() - frame.getHeight())/5);
        frame.setLocation(x, y);
        
   	 //construct preComponents
	      String[] combo = new String[]{"Cantidad de samples","Tiempo limite"};
	      //construct components
	      btnChooser = new JButton ("Cargar Archivo");
	      btnChooser.addActionListener(this);
	      btnStart = new JButton ("Empezar a renderizar");
	      btnStart.addActionListener(this);
	      btnStart.setEnabled(false);
	      jcomp3 = new JLabel ("Renderizar Por:");
	      jcomp4 = new JComboBox<String>(combo);
	      jcomp4.addActionListener(this);
	      cantidad =  new JFormattedTextField(new Integer(2));
	      labelSeg = new JLabel ("Segundos:");
	      labelSeg.setVisible(false);
	      nroFrame =  new JFormattedTextField(new Integer(75));
	      labelFrame = new JLabel ("Numero de Frame a renderizar:");
	      labelSam = new JLabel ("Samples:");
	      chkHighEnd = new JCheckBox ("Renderizado High-End");
	      chkHighEnd.addActionListener(this);

	      //adjust size and set layout
	      setPreferredSize (new Dimension (372, 266));
	      setLayout (null);
	      //add components
	      add (btnChooser);
	      add (btnStart);
	      add (jcomp3);
	      add (jcomp4);
	      add (cantidad);
	      add (labelSam);
	      add (labelSeg);
	      add (nroFrame);
	      add (labelFrame);
	      add (chkHighEnd);
	      //set component bounds (only needed by Absolute Positioning)
	      btnChooser.setBounds (15, 10, 180, 40);
	      btnStart.setBounds (15, 220, 170, 40);
	      jcomp3.setBounds (15, 55, 180, 25);
	      jcomp4.setBounds (15, 80, 180, 25);
	      cantidad.setBounds (195, 120, 170, 25);
	      labelSeg.setBounds (15, 120, 170, 25);
	      nroFrame.setBounds (195, 155, 170, 25);
	      labelFrame.setBounds (15, 155, 180, 25);
	      labelSam.setBounds (15, 120, 100, 25);
	      chkHighEnd.setBounds (195, 190, 170, 25);
	      
        
	      frame.getContentPane().add(this);
	      frame.pack();
	      frame.setVisible (true);
	      //Create a file chooser
	      fc = new JFileChooser();    
	}
	public void actionPerformed(ActionEvent e) {
		 if (e.getSource() == this.btnChooser) {
			fc = new JFileChooser();
			FileFilter filter = new FileNameExtensionFilter("Blender File","blend");
			this.fc.setFileFilter(filter);
			this.fc.setCurrentDirectory(new File("./proyectos/"));
			int returnVal = this.fc.showOpenDialog(null);
	        if (returnVal == JFileChooser.APPROVE_OPTION) {
	        	this.controlador.setFile(fc.getSelectedFile());
	        }
		 }
		 if (e.getSource() == this.jcomp4) {
			 if(this.jcomp4.getSelectedIndex() == 0) {
				 this.controlador.setTipoRender(0);
				 this.labelSeg.setVisible(false);
				 this.labelSam.setVisible(true);
			 }else {
				 this.controlador.setTipoRender(1);
				 this.labelSeg.setVisible(true);
				 this.labelSam.setVisible(false);
			 }
		 }
		 if (e.getSource() == this.chkHighEnd) {
			 if(chkHighEnd.isSelected()) {
				 this.controlador.setHighRender(true);
			 }else {
				 this.controlador.setHighRender(false);
			 }
		 }
		 if (e.getSource() == this.btnStart) {
			 int value = Integer.valueOf(this.cantidad.getText().replace(".", ""));
			 int noFrame = Integer.valueOf(this.nroFrame.getText().replace(".", ""));
			
			 if(value > 0) {
				 if(noFrame > 250) {
					 JOptionPane.showMessageDialog(null, "ERROR: El numero de frame no puede ser mayor a 250.");
					 this.nroFrame.setText("250");
				 }else {
					 this.frame.setTitle("Procesando...");
					 String str = this.controlador.enviarFile(value,noFrame);
					 this.frame.setTitle("Renderizado Distribuido");
					 JOptionPane.showMessageDialog(null,"Guardado en:\n"+str);
				 }
			 }else {
				 JOptionPane.showMessageDialog(null, "ERROR: La cantidad de samples / segundos debe ser mayor a 0.");
			 }
		 }
		 if(this.controlador.isReady())
			 this.btnStart.setEnabled(true);
		 else
			 this.btnStart.setEnabled(false);
		       
	 }

}